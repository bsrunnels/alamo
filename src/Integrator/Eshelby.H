#ifndef INTEGRATOR_ESHELBY_H
#define INTEGRATOR_ESHELBY_H
#include <iostream>
#include <fstream>
#include <iomanip>

#include "AMReX.H"
#include "AMReX_ParallelDescriptor.H"
#include "AMReX_ParmParse.H"

#include "Integrator/Integrator.H"

#include "IC/IC.H"
#include "BC/BC.H"
#include "BC/Operator/Elastic/Constant.H"
#include "BC/Operator/Elastic/Crack.H"

#include "IC/Ellipse.H"
#include "Numeric/Stencil.H"

#include "Model/Solid/Solid.H"
#include "Solver/Nonlocal/Linear.H"
#include "Solver/Nonlocal/Newton.H"
#include "Model/Solid/Affine/Isotropic.H"

#include "Operator/Operator.H"

#include "IO/ParmParse.H"

namespace Integrator
{
class Eshelby : public Integrator
{
    using model_type = Model::Solid::Affine::Isotropic;
public:
    /// \brief Read in parameters and register field variables
    Eshelby()
    {
        RegisterNodalFab(eta_mf, 1, 2, "eta",true);
        RegisterNodalFab(disp_mf, AMREX_SPACEDIM, 2, "disp",true);
        RegisterNodalFab(rhs_mf, AMREX_SPACEDIM, 2, "rhs",true);
        RegisterNodalFab(stress_mf, AMREX_SPACEDIM * AMREX_SPACEDIM, 2, "stress",true);
        RegisterNodalFab(strain_mf, AMREX_SPACEDIM * AMREX_SPACEDIM, 2, "strain",true);
        {
            IO::ParmParse pp("ic");
            std::string type;
            pp.query("type",type);
            if (type=="ellipse")
            {
                ic = new IC::Ellipse(geom);
                pp.queryclass("ellipse",static_cast<IC::Ellipse*>(ic));
            }
            if (pp.contains("Finclusion")) pp.queryarr("Finclusion",Finclusion);
            if (pp.contains("Fmatrix"))    pp.queryarr("Fmatrix",Fmatrix);
        }
        {
            IO::ParmParse pp("elastic");
            {
                // Initialize elastic model
                pp.queryclass("model",elastic.model);
                elastic.model.F0 = Set::Matrix::Zero();

                // TODO: figure out how to initialize solvers in
                // here instead of TimeStepBegin...

                //pp.queryclass("bc",elastic.bc);
                elastic.bc = BC::Operator::Elastic::Crack(0.01);
                pp.query("max_coarsening_level",elastic.max_coarsening_level);
                pp.query("refinement_criterion",elastic.refinement_criterion);
            }
        }
        
        RegisterGeneralFab(model_mf, 1, 2);
    }

protected:
    /// \brief Use the #ic object to initialize#Temp
    void Initialize(int lev) override
    {
        eta_mf[lev]->setVal(0.0);
        ic->Initialize(lev, eta_mf);

        disp_mf[lev]->setVal(0.);
        rhs_mf[lev]->setVal(0.);
    }

    void TimeStepBegin(Set::Scalar, int iter) override
    {
        // Set linear elastic model
        
        for (int lev = 0; lev <= finest_level; ++lev)
        {
            rhs_mf[lev]->setVal(0.0);

            model_mf[lev]->setVal(elastic.model);

            ic->Initialize(lev,eta_mf);
            eta_mf[lev]->FillBoundary();

            Set::Vector DX(geom[lev].CellSize());

            for (MFIter mfi(*model_mf[lev], false); mfi.isValid(); ++mfi)
            {
                amrex::Box bx = mfi.growntilebox(2);

                amrex::Array4<model_type> const &model = model_mf[lev]->array(mfi);
                amrex::Array4<const Set::Scalar> const &eta = eta_mf[lev]->array(mfi);

                amrex::ParallelFor(bx, [=] AMREX_GPU_DEVICE(int i, int j, int k) {
                    Set::Matrix Fgb = (1.0 - eta(i, j, k)) * Fmatrix + eta(i, j, k) * Finclusion;
                    model(i, j, k) = elastic.model;
                    model(i, j, k).F0 = Fgb;
                });
            }

            Util::RealFillBoundary(*model_mf[lev],geom[lev]);
        }

        elastic.bc.Init(rhs_mf,geom);

        amrex::LPInfo info;
        info.setMaxCoarseningLevel(elastic.max_coarsening_level);
        Operator::Elastic<Model::Solid::Affine::Isotropic::sym> elastic_op(Geom(0,finest_level), grids, DistributionMap(0,finest_level), info);
        elastic_op.SetUniform(false);
        elastic_op.SetBC(&elastic.bc);

        Set::Scalar tol_rel = 1E-8, tol_abs = 1E-8;

        IO::ParmParse pp("elastic");
        elastic.solver = new Solver::Nonlocal::Newton<Model::Solid::Affine::Isotropic>(elastic_op);
        pp.queryclass("solver",*elastic.solver);

        elastic.solver->solve(disp_mf,rhs_mf,model_mf,tol_rel,tol_abs);

        for (int lev = 0; lev <= disp_mf.finest_level; lev++)
        {
            elastic_op.Stress(lev, *stress_mf[lev], *disp_mf[lev]);
            elastic_op.Strain(lev, *strain_mf[lev], *disp_mf[lev]);
        }
    }

    void Advance(int /*lev*/, Set::Scalar /*time*/, Set::Scalar /*dt*/) override
    {
        // Nothing to do here.
    }

    void TagCellsForRefinement(int lev, amrex::TagBoxArray &a_tags, amrex::Real /*time*/, int /*ngrow*/) override
    {
        Set::Vector DX(geom[lev].CellSize());
        Set::Scalar DXnorm = DX.lpNorm<2>();
        a_tags.setVal(amrex::TagBox::CLEAR);
        amrex::Box domain(geom[lev].Domain());
        domain.convert(amrex::IntVect::TheNodeVector());
        domain.grow(-1);

        for (amrex::MFIter mfi(*eta_mf[lev], TilingIfNotGPU()); mfi.isValid(); ++mfi)
        {
            amrex::Box bx = mfi.tilebox();
            bx = bx & domain;
            amrex::Array4<char> const &tags = a_tags.array(mfi);
            amrex::Array4<Set::Scalar> const &eta = eta_mf[lev]->array(mfi);
            amrex::Array4<Set::Scalar> const &disp = disp_mf[lev]->array(mfi);
            amrex::ParallelFor(bx, [=] AMREX_GPU_DEVICE(int i, int j, int k) {
                    
                {
                    //Set::Vector grad = Numeric::Gradient(eta, i, j, k, 0, DX.data());
                    //if (grad.lpNorm<2>() * DXnorm > 0.01)
                    //    tags(i, j, k) = amrex::TagBox::SET;
                }
                {
                    //Set::Vector grad1 = 
                    Set::Scalar normgrad = 
                        (Numeric::Hessian(disp, i, j, k, 0, DX.data()) + 
                         Numeric::Hessian(disp, i, j, k, 1, DX.data())).lpNorm<2>();
                    //Set::Scalar normgrad = grad1.lpNorm<2>();
                    //Set::Vector grad2 = Numeric::Gradient(disp, i, j, k, 1, DX.data());
                    //Set::Scalar normgrad = grad1.lpNorm<2>() + grad2.lpNorm<2>();
                    if (normgrad * DXnorm * DXnorm > elastic.refinement_criterion)
                        tags(i, j, k) = amrex::TagBox::SET;
                }
            });
        }
    }

private:
    Set::Field<Set::Scalar> eta_mf;
    Set::Field<Set::Scalar> disp_mf;
    Set::Field<Set::Scalar> rhs_mf;
    Set::Field<Set::Scalar> res_mf;
    Set::Field<Set::Scalar> stress_mf;
    Set::Field<Set::Scalar> strain_mf;

    Set::Field<model_type> model_mf;

    IC::IC *ic;          ///< Pointer to abstract IC object
    BC::BC<Set::Scalar> *mybc;        ///< Stock generic boundary condition object
    
    Set::Matrix Fmatrix = Set::Matrix::Zero();
    Set::Matrix Finclusion = Set::Matrix::Zero();

    struct {
        Model::Solid::Affine::Isotropic model;
        Solver::Nonlocal::Newton<Model::Solid::Affine::Isotropic> *solver;//(elastic.op);
        //BC::Operator::Elastic::Constant bc;
        BC::Operator::Elastic::Crack bc;
        int max_coarsening_level = 1000000;
        Set::Scalar refinement_criterion = 1.0;
    } elastic;

};
} // namespace Integrator
#endif
