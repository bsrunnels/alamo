#ifndef MODEL_SOLID_LINEARELASTIC_ISOTROPIC_H_
#define MODEL_SOLID_LINEARELASTIC_ISOTROPIC_H_

#include <AMReX.H>
#include <AMReX_REAL.H>
#include <eigen3/Eigen/Core>

#include "Util/Util.H"
#include "Set/Set.H"
#include "Model/Solid/LinearElastic/LinearElastic.H"

namespace Model
{
namespace Solid
{
namespace LinearElastic
{
///
/// Isotropic implements the following elastic model
/// \f[ \sigma_{ij} = 2\mu\varepsilon_{ij} + \lambda\varepsilon_{kk}\delta_{ij}  \f]
///
class Isotropic : public Model::Solid::LinearElastic::LinearElastic<Set::Sym::Isotropic>
{
public:
	__host__ __device__ Isotropic() {} ;
	__host__ __device__ Isotropic(Set::Scalar _mu, Set::Scalar _lambda) : mu(_mu) , lambda(_lambda) {} ;
	//__host__ __device__ ~Isotropic() {} ;

	AMREX_FORCE_INLINE
	__host__ __device__ 
	virtual Set::Matrix operator () (Set::Matrix &eps,bool =true) const
	{
		return mu*(eps + eps.transpose()) + lambda*Set::Matrix::Identity()*eps.trace();
	};

	AMREX_FORCE_INLINE
	__host__ __device__ 
	virtual Set::Vector operator () (std::array<Set::Matrix,AMREX_SPACEDIM> &gradeps,bool =true)
	{
		Set::Vector f = Set::Vector::Zero();
		for (int i = 0; i < AMREX_SPACEDIM; i++)
			for (int j=0; j < AMREX_SPACEDIM; j++)
				f(i) += mu*(gradeps[i](j,j) + gradeps[j](i,j))  + lambda*gradeps[j](j,i);
		return f;
	}

	void Randomize()
	{
		mu = Util::Random();
		lambda = Util::Random();
	};

	virtual void Print (std::ostream& os) const
	{
		os <<    "mu = " << mu <<
			" lambda = " << lambda << std::endl;
	}

	__host__ __device__ 
	Isotropic operator + (const Isotropic &rhs) const
	{return Isotropic(mu+rhs.mu, lambda+rhs.lambda);}

	__host__ __device__ 
	void operator += (const Isotropic &rhs)
	{mu+=rhs.mu; lambda+=rhs.lambda;}

	__host__ __device__ 
	Isotropic operator - (const Isotropic &rhs) const
	{return Isotropic(mu-rhs.mu, lambda-rhs.lambda);}

	__host__ __device__ 
	Isotropic operator * (const Isotropic &rhs) const
	{return Isotropic(mu*rhs.mu, lambda*rhs.lambda);}

	__host__ __device__ 
	Isotropic operator / (const Isotropic &rhs) const
	{return Isotropic(mu/rhs.mu, lambda/rhs.lambda);}

	__host__ __device__ 
	virtual Isotropic operator / (const Set::Scalar alpha) const
	{return Isotropic(mu/alpha, lambda/alpha);}

	__host__ __device__ 
	virtual Isotropic operator * (const Set::Scalar alpha) const
	{return Isotropic(mu*alpha, lambda*alpha);}

private:
	Set::Scalar mu; ///< First Lame parameter \f$\mu\f$
	Set::Scalar lambda; ///< Second Lame parameter \f$\lambda\f$
};

}
}
}

#endif


